name: Staging Deployment

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]
    types: [closed]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Run tests first
  test-all:
    name: Run All Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      # Web tests
      - name: Install web dependencies
        run: |
          cd apps/web/dynastyweb
          yarn install --frozen-lockfile

      - name: Test web app
        run: |
          cd apps/web/dynastyweb
          yarn lint
          npx tsc --noEmit
          yarn test --ci --coverage --maxWorkers=2

      # Mobile tests
      - name: Install mobile dependencies
        run: |
          cd apps/mobile
          yarn install --frozen-lockfile

      - name: Test mobile app
        run: |
          cd apps/mobile
          yarn lint
          npx tsc --noEmit
          yarn test --ci --coverage --maxWorkers=2

      # Firebase tests
      - name: Install Firebase dependencies
        run: |
          cd apps/firebase/functions
          npm ci

      - name: Test Firebase functions
        run: |
          cd apps/firebase/functions
          npm run lint
          npm run build
          npm test -- --ci --coverage --maxWorkers=2

  # Deploy Web to Vercel Staging
  deploy-web-staging:
    name: Deploy Web to Staging
    runs-on: ubuntu-latest
    needs: test-all
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    environment:
      name: staging
      url: https://dynasty-staging.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.STAGING_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.STAGING_FIREBASE_APP_ID }}
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --meta environment=staging)
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          vercel alias set $DEPLOYMENT_URL dynasty-staging.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ğŸš€ Staging deployment successful!\n\nView staging environment: https://dynasty-staging.vercel.app'
            })

  # Deploy Firebase Functions to Staging
  deploy-firebase-staging:
    name: Deploy Firebase to Staging
    runs-on: ubuntu-latest
    needs: test-all
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    environment:
      name: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: |
          cd apps/firebase/functions
          npm ci

      - name: Build functions
        run: |
          cd apps/firebase/functions
          npm run build

      - name: Deploy to Firebase Staging
        run: |
          cd apps/firebase
          firebase use staging --token ${{ secrets.FIREBASE_TOKEN }}
          firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_CONFIG: ${{ secrets.STAGING_FIREBASE_CONFIG }}

  # Integration Tests on Staging
  staging-integration-tests:
    name: Staging Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-web-staging, deploy-firebase-staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Run E2E tests against staging
        run: |
          echo "Running E2E tests against staging environment"
          # Add your E2E test commands here
          # Example: npx playwright test --config=playwright.staging.config.ts
        env:
          STAGING_URL: https://dynasty-staging.vercel.app
          STAGING_API_URL: ${{ secrets.STAGING_FIREBASE_FUNCTIONS_URL }}

      - name: Notify success
        if: success()
        run: echo "âœ… Staging deployment and tests completed successfully!"

      - name: Create staging report
        if: always()
        run: |
          echo "# Staging Deployment Report" > staging-report.md
          echo "- Web URL: https://dynasty-staging.vercel.app" >> staging-report.md
          echo "- Firebase Project: ${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> staging-report.md
          echo "- Deployment Time: $(date)" >> staging-report.md
          echo "- Commit: ${{ github.sha }}" >> staging-report.md