name: Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_web:
        description: 'Deploy Web App'
        required: true
        default: true
        type: boolean
      deploy_firebase:
        description: 'Deploy Firebase Functions'
        required: true
        default: true
        type: boolean
      deploy_mobile:
        description: 'Deploy Mobile App'
        required: true
        default: false
        type: boolean

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Pre-deployment checks
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_web: ${{ steps.check.outputs.deploy_web }}
      deploy_firebase: ${{ steps.check.outputs.deploy_firebase }}
      deploy_mobile: ${{ steps.check.outputs.deploy_mobile }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check what changed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy_web=${{ github.event.inputs.deploy_web }}" >> $GITHUB_OUTPUT
            echo "deploy_firebase=${{ github.event.inputs.deploy_firebase }}" >> $GITHUB_OUTPUT
            echo "deploy_mobile=${{ github.event.inputs.deploy_mobile }}" >> $GITHUB_OUTPUT
          else
            # Check changed files
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            
            if echo "$CHANGED_FILES" | grep -q "^apps/web/"; then
              echo "deploy_web=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_web=false" >> $GITHUB_OUTPUT
            fi
            
            if echo "$CHANGED_FILES" | grep -q "^apps/firebase/"; then
              echo "deploy_firebase=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_firebase=false" >> $GITHUB_OUTPUT
            fi
            
            if echo "$CHANGED_FILES" | grep -q "^apps/mobile/"; then
              echo "deploy_mobile=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_mobile=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Verify staging tests passed
        run: |
          echo "Checking that staging deployment was successful..."
          # Add verification logic here

  # Manual approval before production
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment:
      name: production-approval
    steps:
      - name: Approval checkpoint
        run: echo "Production deployment approved by ${{ github.actor }}"

  # Production Web Deployment
  deploy-web-production:
    name: Deploy Web to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, production-approval]
    if: needs.pre-deployment-checks.outputs.deploy_web == 'true'
    
    environment:
      name: production
      url: https://mydynastyapp.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: |
          cd apps/web/dynastyweb
          yarn install --frozen-lockfile

      - name: Run production tests
        run: |
          cd apps/web/dynastyweb
          yarn test --ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.PROD_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.PROD_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.PROD_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.PROD_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.PROD_FIREBASE_APP_ID }}
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Deploy to Vercel Production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: apps/web/dynastyweb

      - name: Purge Cloudflare Cache
        run: |
          echo "Purging Cloudflare cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

  # Production Firebase Deployment
  deploy-firebase-production:
    name: Deploy Firebase to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, production-approval]
    if: needs.pre-deployment-checks.outputs.deploy_firebase == 'true'
    
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: |
          cd apps/firebase/functions
          npm ci

      - name: Run production tests
        run: |
          cd apps/firebase/functions
          npm test -- --ci

      - name: Build functions
        run: |
          cd apps/firebase/functions
          npm run build

      - name: Deploy to Firebase Production
        run: |
          cd apps/firebase
          firebase use production --token ${{ secrets.FIREBASE_TOKEN }}
          firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
        env:
          FIREBASE_CONFIG: ${{ secrets.PROD_FIREBASE_CONFIG }}

  # Mobile App Build and Deploy
  deploy-mobile-production:
    name: Build and Deploy Mobile App
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.deploy_mobile == 'true'
    
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: |
          cd apps/mobile
          yarn install --frozen-lockfile

      - name: Run mobile tests
        run: |
          cd apps/mobile
          yarn test --ci

      - name: Build for iOS
        run: |
          cd apps/mobile
          eas build --platform ios --profile production --non-interactive

      - name: Build for Android
        run: |
          cd apps/mobile
          eas build --platform android --profile production --non-interactive

      - name: Submit to App Stores
        run: |
          cd apps/mobile
          # iOS App Store
          eas submit -p ios --latest --non-interactive
          # Google Play Store
          eas submit -p android --latest --non-interactive

  # Post-deployment validation
  production-validation:
    name: Production Validation
    runs-on: ubuntu-latest
    needs: [deploy-web-production, deploy-firebase-production]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Health check - Web
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://mydynastyapp.com)
          if [ $response -eq 200 ]; then
            echo "✅ Web app is healthy"
          else
            echo "❌ Web app health check failed"
            exit 1
          fi

      - name: Health check - API
        run: |
          echo "Checking Firebase Functions health..."
          # Add API health check

      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test commands

      - name: Create deployment report
        run: |
          echo "# Production Deployment Report" > deployment-report.md
          echo "- Deployment Time: $(date)" >> deployment-report.md
          echo "- Commit: ${{ github.sha }}" >> deployment-report.md
          echo "- Web Deployed: ${{ needs.pre-deployment-checks.outputs.deploy_web }}" >> deployment-report.md
          echo "- Firebase Deployed: ${{ needs.pre-deployment-checks.outputs.deploy_firebase }}" >> deployment-report.md
          echo "- Mobile Deployed: ${{ needs.pre-deployment-checks.outputs.deploy_mobile }}" >> deployment-report.md

      - name: Notify team
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            const message = `${status} Production deployment completed\n\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}`;
            
            // Create deployment issue or comment
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Production Deployment - ${new Date().toISOString().split('T')[0]}`,
              body: message,
              labels: ['deployment', 'production']
            });