---
description: 
globs: 
alwaysApply: true
---
\\\n# AI Coding Assistant Rules for Backend (Firebase) - `apps/firebase`\n\nThese rules apply when working on the Firebase backend located in `apps/firebase`.\nAlways refer to the general rules in `.cursor/general/README.md` as well.\n\n## Key Firebase Services & Structure\n- **Firebase Functions**:\n    - Located in `apps/firebase/functions/src`.\n    - Written in TypeScript. Pay attention to `apps/firebase/functions/package.json` for dependencies and `apps/firebase/functions/tsconfig.json` for build configuration.\n    - Group related functions into files (e.g., `userHandlers.ts`, `paymentHandlers.ts`).\n    - Clearly define triggers (HTTPS, Firestore, Auth, Pub/Sub, Storage).\n    - Handle errors gracefully and return appropriate HTTP status codes for HTTPS functions.\n    - Optimize for cold starts where possible (e.g., minimize global scope variables, lazy load dependencies).\n    - Ensure idempotency for event-triggered functions where appropriate.\n- **Firestore**:\n    - Define clear data models. Consider creating TypeScript interfaces/types for your collections in `packages/utils/src/types` or a dedicated types package.\n    - Write efficient queries. Avoid fetching unnecessary data.\n    - **Security Rules**: Located in `apps/firebase/firestore.rules`. These are critical. Always consider security implications when designing data structures or functions. Rules should be as restrictive as possible.\n- **Firebase Authentication**:\n    - Manage users and authentication providers.\n    - Custom claims can be used for role-based access control, set via Firebase Functions.\n- **Cloud Storage for Firebase**:\n    - Manage file uploads and downloads.\n    - **Security Rules**: Located in `apps/firebase/storage.rules`. Ensure these are robust to prevent unauthorized access.\n- **Firebase Hosting**: While the web app (`apps/web`) might be deployed to Vercel, Firebase Hosting might be used for other purposes or specific static assets related to the backend. Check `firebase.json`.\n\n## Development & Deployment\n- **Firebase Emulators**: Use the Firebase Local Emulator Suite for development. Scripts to start/export emulators are likely in `apps/web/dynastyweb/package.json` (or should be moved to root or `apps/firebase/package.json`).\n    - Current emulator scripts in `apps/web/dynastyweb/package.json` point to `../../firebase` for the Firebase project.\n- **Deployment**: Use `firebase deploy` command. Be specific about what to deploy (e.g., `firebase deploy --only functions`, `firebase deploy --only firestore:rules`).\n- **Environment Variables for Functions**: Configure using `firebase functions:config:set mykey.subkey=value`. Access in functions via `functions.config().mykey.subkey`.\n\n## Best Practices\n- **Admin SDK**: Use the Firebase Admin SDK (`firebase-admin`) in Cloud Functions for privileged operations.\ Initialize it correctly (`admin.initializeApp()`).\n- **Error Logging & Monitoring**: Integrate with Sentry or Google Cloud Logging for Cloud Functions.\n- **Code Reusability**: Common utility functions for the backend can be placed within `apps/firebase/functions/src/utils` or, if also usable by frontend, in `packages/utils`.\n- **Security**: This is paramount. Always think about data validation, authentication, and authorization for every endpoint and data access pattern.\n\n## Linting and Formatting\n- ESLint and Prettier are likely set up within `apps/firebase/functions`. Adhere to their rules.\n 